service: telegram-form-bot-serverless

plugins:
  - serverless-plugin-typescript

provider:
  name: aws
  runtime: nodejs10.x
  region: eu-central-1
  logRetentionInDays: 3
  environment:
    BOT_TOKEN: ${file(./env.json):BOT_TOKEN, env:BOT_TOKEN}
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    BUCKET: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ses:*"
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

custom:
  s3Bucket: formbucket-${self:provider.environment.BUCKET}

functions:
  send:
    handler: handler.sendAnswer
    events:
      - http:
          path: send
          method: post

resources:
  Resources:
    AnswersDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    # FormBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: ${self:custom.s3Bucket}
    #     PublicAccessBlockConfiguration:
    #       AccessControl: Private
    #       BlockPublicAcls: true
    #       BlockPublicPolicy: true
    #       IgnorePublicAcls: true
    #       RestrictPublicBuckets: true

package:
  exclude:
    - src/tests/**
    - jest.config.js
    - tsconfig.json
    - tslint.json
    - env*.json
    - .travis.yml
    - .prettierrc
